y<-3+ 0.1*X1+0.5*X2+error
y
?lm
lm(y~X1+X2)
summary(lm(y~X1+X2))
?predict.lm
M5<- lm(y~X1+X2)
predict(M5, interval="confidence", level= 0.68)
M5$coefficients
library(foreign)
edat<- read.csv("~/Desktop/edsproject/data_cleaned.csv")
dat<- read.dta("~/Desktop/edsproject/china_univ_by_municipality.dta")
total<- merge(edat, dat, by=c("cityid", "year"))
library(gplots)
plotmeans(ncampus~year, main="Number of campuses in China 1985-2011", n.label= FALSE, data=dat)
aggregate(ncampus ~ citycat, data=total, mean)
aggregate(ncampus ~ provid.x, data=total, mean)
pairs(scale(only2010[,6:12]),pch=16)
race <- read_csv("~/Downloads/race.csv")
library(foreign)
race <- read_csv("~/Downloads/race.csv")
library(foreign)
race <- read.csv("~/Downloads/race.csv")
hare_mean<- mean(race$Hare)
tortoise_mean<- mean(race$Tortoise)
race.difference<- hare_mean-tortoise_mean
library(foreign)
race <- read.csv("~/Downloads/race.csv")
hare_mean<- mean(race$Hare)
tortoise_mean<- mean(race$Tortoise)
race.difference<- hare_mean-tortoise_mean
race.difference
varh<-var(race$Hare)
vart<-var(race$Tortoise)
varh<-var(race$Hare)
varh
vart<-var(race$Tortoise)
vart
varh<-var(race$Hare)
varh
vart<-var(race$Tortoise)
vart
varht <- var(race$Hare+race$Tortoise)
varht
varh<-var(race$Hare)
varh
vart<-var(race$Tortoise)
vart
varht <- var(race$Hare+race$Tortoise)
varht
vart+varh
varh<-var(race$Hare)
varh
vart<-var(race$Tortoise)
vart
varht <- var(hare_mean-tortoise_mean)
varht
vart+varh
only2010<- total[which(total$year==2010),]
pairs(scale(only2010[,6:12]),pch=16)
str(only2010)
only2010<- total[which(total$year==2010),]
#drop unnecessary variables
only2010<- only2010[c(-3,-4,-5,-8,-9,-13,-14,-15,-16,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-43,-44,-45)]
dim(only2010)
#Sort the variables order
only2010<-only2010[,c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39)]
only2010<-only2010[,c(1,2,3,4,5,6,8,10,12,14,16,19,7,9,11,13,15,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39)]
pairs(scale(only2010[,6:12]),pch=16)
str(only2010)
pairs(scale(only2010[,13:20]),pch=16)
?felm
??felm
library(plm)
install.packages(plm)
install.packages("plm")
library(plm)
?plm
fe1<- plm(ncampus ~ lgdptota+log(poptota)+log(fditota)+log(wgavea), index=c("cityid","year"), data=total)
plm(ncampus~ lgdptota, index=c("cityid", "year"), data=total)
summary(plm(ncampus~ lgdptota, index=c("cityid", "year"), data=total))
fe1<- plm(ncampus ~ lgdptota+poptota+fditota+wgavea, index=c("cityid","year"), data=total)
summary(fe1)
library(plm)
fe1<- plm(ncampus ~ lgdptota+poptota+fditota+wgavea, index=c("cityid","year"), data=total)
summary(fe1)
fe2<- plm(ncampus ~ lgdptotc+poptotc+fditotc+wgavec, index=c("cityid","year"), data=total)
summary(fe2)
str(total$citycat)
aggregate(ncampus ~ citycat, data=total, mean)
citycategory<- ifelse(total$cityid==c("City in prefecture". "City outside prefecture", "County in prefecture"), c("prefecture"),c("urban core"))
citycategory<- ifelse(total$cityid==c("City in prefecture", "City outside prefecture", "County in prefecture"), c("prefecture"),c("urban core"))
citycategory<- ifelse(total$cityid=="City in prefecture"| "City outside prefecture"|"County in prefecture", c("prefecture"),c("urban core"))
View(total)
summary(total$citycat)
citycategory<- ifelse(total$cityid==("City in prefecture"| "City outside prefecture"|"County in prefecture"), c("prefecture"),c("urban core"))
attach(total)
str(citycategory)
summary(citycategory)
tabulate((citycategory))
total$citycat[citycat=="City in prefecture"] <- "prefecture"
citycateg<-c(0,1)
total<-cbind(total, citecateg)
total<-cbind(total, citycateg)
total$citycateg[total$citycat=="City in prefecture"] <- "prefecture"
total$citycateg[total$citycat=="City outside prefecture"] <- "prefecture"
total$citycateg[total$citycat=="Prefecture=urban core "] <- "Urban core"
summary(total$citycateg)
summary(total$citycat)
View(total)
total$citycateg[total$citycat=="City in prefecture"] <- 0
total$citycateg[total$citycat=="City outside prefecture"] <- 0
total$citycateg[total$citycat=="prefecture"] <- 0
total$citycateg[total$citycat=="Prefecture=urban core"] <- 0
total$citycateg[total$citycat=="Prefecture=urban core"] <- 1
total$citycateg[total$citycat=="Urban core"] <- 1
summary(total$citycateg)
aggregate(ncampus ~ citycateg, data=total, mean)
area<-0
total<- cbind(total, area)
provid.x/int(10)
provid.x/10
table(provid.x/10)
table(provcat)
aggregate(ncampus ~ provcat, data=total, mean)
total$area<- trunc(total$cityid/100000)
table(total$area)
aggregate(ncampus ~ provcat, data=total, mean)
library(foreign)
edat<- read.csv("~/Desktop/edsproject/data_cleaned.csv")
dat<- read.dta("~/Desktop/edsproject/china_univ_by_municipality.dta")
total<- merge(edat, dat, by=c("cityid", "year"))
#recode the category
citycateg<-c(0,1)
total<-cbind(total, citecateg)
total$citycateg[total$citycat=="City in prefecture"] <- 0
total$citycateg[total$citycat=="City outside prefecture"] <- 0
total$citycateg[total$citycat=="prefecture"] <- 0
total$citycateg[total$citycat=="Prefecture=urban core"] <- 0
total$citycateg[total$citycat=="Prefecture=urban core"] <- 1
total$citycateg[total$citycat=="Urban core"] <- 1
library(foreign)
edat<- read.csv("~/Desktop/edsproject/data_cleaned.csv")
dat<- read.dta("~/Desktop/edsproject/china_univ_by_municipality.dta")
total<- merge(edat, dat, by=c("cityid", "year"))
#recode the category
citycateg<-c(0,1)
total<-cbind(total, citycateg)
total$citycateg[total$citycat=="City in prefecture"] <- 0
total$citycateg[total$citycat=="City outside prefecture"] <- 0
total$citycateg[total$citycat=="prefecture"] <- 0
total$citycateg[total$citycat=="Prefecture=urban core"] <- 0
total$citycateg[total$citycat=="Prefecture=urban core"] <- 1
total$citycateg[total$citycat=="Urban core"] <- 1
plotmeans(ncampus~citycateg, main="Number of campuses in China 1985-2011", n.label= FALSE, data=total)
plotmeans(ncampus~provcat, main="Number of campuses in China 1985-2011", n.label= FALSE, data=total)
summary(fe1)$coefficient
pairs(scale(only2010[,13:20]),pch=16)
outcome<- ((var_hare*9+var_tortois*9)/10+10-2)*((1/10)+(1/10))
var_hare<- var(race$Hare)
var_tortois<- var(race$Tortoise)
outcome<- ((var_hare*9+var_tortois*9)/10+10-2)*((1/10)+(1/10))
outcome
var_hare<- var(race$Hare)
var_hare
var_tortois<- var(race$Tortoise)
var_tortois
outcome<- ((var_hare*9+var_tortois*9)/10+10-2)*((1/10)+(1/10))
outcome
var_hare<- var(race$Hare)
var_hare
var_tortois<- var(race$Tortoise)
var_tortois
outcome<- (((var_hare*9)+(var_tortois*9))/10+10-2)*((1/10)+(1/10))
outcome
var_hare<- var(race$Hare)
var_hare
var_tortois<- var(race$Tortoise)
var_tortois
outcome<- (((var_hare*9)+(var_tortois*9)))/((10+10-2)*((1/10)+(1/10)))
outcome
outcome<- ((((var_hare*9)+(var_tortois*9)))/(10+10-2))*((1/10)+(1/10))
outcome
#compute standard error:
SE<- sqrt(var_hare/10+var_tortois/10)
#compute t statistics
t.statstistics<- (race.difference-0)/SE
t.statstistics
#compute p value
2*pt(-abs(t.statstistics),df=length(race$Hare)-1)
#check
t_test<-t.test(race$Hare,race$Tortoise, alternative = "two.sided")
t_test
race$Hare
race$Hare[1] < race$Tortoise[1]
as.numeric(race$Hare[1] < race$Tortoise[1])
for (i in 1:10){
for (j in 1:10){
tg<- as.numeric(race$Hare[i] < race$Tortoise[j])
hg<- as.numberic(race$Hare[i] > race$Tortoise[j])
U_hare <-sum((tg))
U_tortoise<- sum(hg)
}
}
for (i in 1:10){
for (j in 1:10){
tg<- as.numeric(race$Hare[i] < race$Tortoise[j])
hg<- as.numeric(race$Hare[i] > race$Tortoise[j])
U_hare <-sum((tg))
U_tortoise<- sum(hg)
}
}
U_hare
U_tortoise
hare_sort<- sort(race$Hare)
tortoise_sort<- sort(race$Tortoise)
ctbl<- cbind(hare_sort,tortoise_sort)
temp<- hare_sort< tortoise_sort
temp
#Check
wilcox.test(race$Hare,race$Tortoise, alternative = "less")
race$Hare
race$Tortoise
as.numeric(race$Hare[1]< race$Tortoise[2])
for (i in 1:10){
for (j in 1:10){
tg<- as.numeric(race$Hare[i] < race$Tortoise[j])
#hg<- as.numeric(race$Hare[i] > race$Tortoise[j])
U_hare <-sum((tg))
#U_tortoise<- sum(hg)
}
}
tg
for (i in 1:10){
for (j in 1:10){
tg[i,j]<- as.numeric(race$Hare[i] < race$Tortoise[j])
#hg<- as.numeric(race$Hare[i] > race$Tortoise[j])
U_hare <-sum((tg))
#U_tortoise<- sum(hg)
}
}
for (i in 1:10){
for (j in 1:10){
tg[i,j]<- as.numeric(race$Hare[i] < race$Tortoise[j])
#hg<- as.numeric(race$Hare[i] > race$Tortoise[j])
U_hare <-sum((tg[i,j]))
#U_tortoise<- sum(hg)
}
}
dim(race)
dim(race)[1]
dim(race)[2]
race
for (i in 1:length(race$Hare)){
for (j in 1: length(race$Tortoise)){
tg<- as.numeric(race$Hare[i] < race$Tortoise[j])
#hg<- as.numeric(race$Hare[i] > race$Tortoise[j])
v<-v+tg
#U_tortoise<- sum(hg)
}
}
v<-0
for (i in 1:length(race$Hare)){
for (j in 1: length(race$Tortoise)){
tg<- as.numeric(race$Hare[i] < race$Tortoise[j])
#hg<- as.numeric(race$Hare[i] > race$Tortoise[j])
v <- v+tg
#U_tortoise<- sum(hg)
}
}
v
v<-0
u<-0
for (i in 1:length(race$Hare)){
for (j in 1: length(race$Tortoise)){
tg<- as.numeric(race$Hare[i] < race$Tortoise[j])
ug<- as.numeric(race$Hare[i] > race$Tortoise[j])
v <- v+tg
u<- u+ug
}
}
v
u
varh<-var(race$Hare)
vart<-var(race$Tortoise)
rightside <- var(hare_mean-tortoise_mean)
rightside
varh<-var(race$Hare)
vart<-var(race$Tortoise)
rightside <- varh+vart
rightside
varh<-var(mean(race$Hare))
vart<-var(race$Tortoise)
rightside <- varh+vart
rightside
#compute standard error:
SE<- sqrt(var_hare/10+var_tortois/10)
#compute t statistics
t.statstistics<- (race.difference-0)/SE
t.statstistics
#compute p value
pvalue<-2*pt(-abs(t.statstistics),df=length(race$Hare)-1)
p.value
#compute standard error:
SE<- sqrt(var_hare/10+var_tortois/10)
#compute t statistics
t.statstistics<- (race.difference-0)/SE
t.statstistics
#compute p value
pvalue <-2*pt(-abs(t.statstistics),df=length(race$Hare)-1)
pvalue
#check
t_test<-t.test(race$Hare,race$Tortoise, alternative = "two.sided")
t_test
#calculate the rejection region at 5%
#right<-
#compute standard error:
SE<- sqrt(var_hare/10+var_tortois/10)
#compute t statistics
t.statstistics<- (race.difference-0)/SE
t.statstistics
#compute p value
pvalue <-2*pt(-abs(t.statstistics),df=length(race$Hare)-1)
pvalue
#check
t_test<-t.test(race$Hare,race$Tortoise, alternative = "two.sided")
t_test
#calculate the rejection region at 5%
right<- t.statistics/2*(SE)
#compute standard error:
SE<- sqrt(var_hare/10+var_tortois/10)
#compute t statistics
t.statstistics<- (race.difference-0)/SE
t.statstistics
#compute p value
pvalue <-2*pt(-abs(t.statstistics),df=length(race$Hare)-1)
pvalue
#check
t_test<-t.test(race$Hare,race$Tortoise, alternative = "two.sided")
t_test
#calculate the rejection region at 5%
right<- t.statstistics/2*(SE)
right
right<- (t.statstistics/2)*(SE)
right
#compute standard error:
SE<- sqrt(var_hare/10+var_tortois/10)
#compute t statistics
t.statstistics<- (race.difference-0)/SE
t.statstistics
#compute p value
pvalue <-2*pt(-abs(t.statstistics),df=length(race$Hare)-1)
pvalue
#check
t_test<-t.test(race$Hare,race$Tortoise, alternative = "two.sided")
t_test
#calculate the rejection region at 5%
right<- (t.statstistics/2)*(SE)
right
right<- race.difference + (t.statstistics/2)*(SE)
right
#compute standard error:
SE<- sqrt(var_hare/10+var_tortois/10)
#compute t statistics
t.statstistics<- (race.difference-0)/SE
t.statstistics
#compute p value
pvalue <-2*pt(-abs(t.statstistics),df=length(race$Hare)-1)
pvalue
#check
t_test<-t.test(race$Hare,race$Tortoise, alternative = "two.sided")
t_test
#calculate the rejection region at 5%
right<- race.difference + (t.statstistics/2)*(SE)
right
left<- race.difference - (t.statstistics/2)*(SE)
left
varh<-var(race$Hare)
vart<-var(race$Tortoise)
rightside <- varh+vart
rightside
right<- race.difference + 1.65*(SE)
right
left<- race.difference - 1.65*(SE)
left
#compute standard error:
SE<- sqrt(var_hare/10+var_tortois/10)
#compute t statistics
t.statstistics<- (race.difference-0)/SE
t.statstistics
#compute p value
pvalue <-2*pt(-abs(t.statstistics),df=length(race$Hare)-1)
pvalue
#check
t_test<-t.test(race$Hare,race$Tortoise, alternative = "two.sided")
t_test
#calculate the rejection region at 5%
right<- race.difference + 1.65*(SE)
right
left<- race.difference - 1.65*(SE)
left
plot(density(race$Hare))
plot(density(race$Tortoise))
qqnorm(race$Hare)
qqnorm(race$Hare); qqline(race$Hare, col=2)
qqnorm(race$Hare); qqline(race$Hare, col=2)
qqnorm(race$Tortoise); qqline(race$Tortoise, col=2)
#compute standard error:
SE<- sqrt(var_hare/10+var_tortois/10)
#compute t statistics
t.statstistics<- (race.difference-0)/SE
t.statstistics
#compute p value
pvalue <-2*pt(-abs(t.statstistics),df=length(race$Hare)-1)
pvalue
#check
t_test<-t.test(race$Hare,race$Tortoise, alternative = "two.sided")
t_test
#calculate the rejection region at 5%
right<- race.difference + 1.65*(SE)
right
left<- race.difference - 1.65*(SE)
left
#check assumptions
#normality
plot(density(race$Hare))
plot(density(race$Tortoise))
qqnorm(race$Hare); qqline(race$Hare, col=2)
qqnorm(race$Tortoise); qqline(race$Tortoise, col=2)
#homogeneity of variance
library(HH)
install.packages("HH")
?levene.test
leveneTest(race$Hare)
library(car)
leveneTest(race$Hare)
sd<- sqrt(10*10*(10+10+1)/12)
z.statistics<- (81-0)/sd
sd<- sqrt(10*10*(10+10+1)/12)
sd
z.statistics<- (81-0)/sd
z.statistics
sd<- sqrt(10*10*(10+10+1)/12)
sd
z.statistics<- (81-0)/sd
z.statistics
#Check
wilcox.test(race$Hare,race$Tortoise, alternative = "less", exact=F, correct=F)
19*sd
81-19*sd
sample(1:2, 10, replace=TRUE)
h<- sample(1:2, 10, replace=TRUE)
t<- sample(1:2, 10, replace= TRUE)
n<- 3000
dat<- cbind(h,t)
dat
h<- sample(1:2, 10, replace=TRUE)
t<- sample(1:2, 10, replace= TRUE)
n<- 3000
dat<- cbind(h,t)
for i in 1: n {
h<- sample(1:2, 10, replace=TRUE)
t<- sample(1:2, 10, replace= TRUE)
n<- 3000
dat<- cbind(h,t)
for i in (1: n){
h<- sample(1:2, 10, replace=TRUE)
t<- sample(1:2, 10, replace= TRUE)
n<- 3000
dat<- cbind(h,t)
for (i in 1:n){
samp<- sample(1:2,10,replace=T)
}
samp
dim(samp)
str(samp)
h<- sample(1:2, 10, replace=TRUE)
t<- sample(1:2, 10, replace= TRUE)
n<- 3000
dat<- cbind(h,t)
for (i in 1:n){
samp<- sample(1:2,10,replace=T)
datacreated<- cbind(samp[i])
}
datacreated
samp[1]
samp[,1]
samp[1,]
samp[]
h<- sample(1:2, 10, replace=TRUE)
t<- sample(1:2, 10, replace= TRUE)
n<- 3000
dat<- cbind(h,t)
for (i in 1:n){
samp<- sample(1:2,10,replace=T)
datacreated<- cbind(samp[])
}
datacreated
data.frame(replicate(6000, sample(1:2,10, replace=T)))
dat2<- data.frame(replicate(6000, sample(1:2,10, replace=T)))
dim(dat2)
names(dat2)<- c("hare","tortoise")
even_index<- seq(2,6000,2)
odd_index<- seq(1,5999,2)
names(dat2)[even_index]<-"tortoise"
names(dat2)[odd_index]<-"hare"
dat2<- data.frame(replicate(6000, sample(1:2,10, replace=T)))
dim(dat2)
even_index<- seq(2,6000,2)
odd_index<- seq(1,5999,2)
names(dat2)[even_index]<-"tortoise"
names(dat2)[odd_index]<-"hare"
